// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change to "mysql" or "sqlite" as needed
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  userName String @map("user_name")
  email    String @unique
  nic      String @unique
  mobileNo String @map("mobile_no")
  evm      String? // Assuming this might be optional based on context

  // Relations
  petitions      Petition[]
  policyComments PolicyComment[]
  reports        Report[]

  @@map("users")
}

model Petition {
  id                    Int    @id @default(autoincrement())
  title                 String
  description           String
  requiredSignatureCount Int   @map("required_signature_count")
  signatureCount        Int    @default(0) @map("signature_count")
  creatorId             Int    @map("creator_id")

  // Relations
  creator    User              @relation(fields: [creatorId], references: [id])
  activities PetitionActivity[]

  @@map("petitions")
}

model Category {
  id              Int     @id @default(autoincrement()) @map("category_id")
  categoryName    String  @map("category_name")
  allocatedBudget Decimal @map("allocated_budget")
  spentBudget     Decimal @default(0) @map("spent_budget")

  // Relations
  projects     Project[]
  transactions Transaction[]
  proposals    Proposal[]

  @@map("categories")
}

model Project {
  id              Int     @id @default(autoincrement()) @map("project_id")
  projectName     String  @map("project_name")
  categoryId      Int     @map("category_id")
  allocatedBudget Decimal @map("allocated_budget")
  spentBudget     Decimal @default(0) @map("spent_budget")
  state           String
  province        String
  ministry        String
  viewDetails     String? @map("view_details")

  // Relations
  category Category @relation(fields: [categoryId], references: [id])

  @@map("projects")
}

model Transaction {
  id             Int      @id @default(autoincrement()) @map("transaction_id")
  categoryId     Int      @map("category_id")
  time           DateTime
  spent          Decimal
  allocated      Decimal

  // Relations
  category Category @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model Proposal {
  id               Int      @id @default(autoincrement())
  title            String
  shortDescription String   @map("short_description")
  description      String   @map("description_in_details")
  activeStatus     Boolean  @map("active_status")
  expiredDate      DateTime @map("expired_date")
  yesVotes         Int      @default(0) @map("yes_votes")
  noVotes          Int      @default(0) @map("no_votes")
  categoryId       Int      @map("category_id")

  // Relations
  category Category @relation(fields: [categoryId], references: [id])

  @@map("proposals")
}

model Policy {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  viewFullPolicy String @map("view_full_policy")
  ministry    String
  createdTime DateTime @map("created_time")

  // Relations
  comments PolicyComment[]

  @@map("policies")
}

model PolicyComment {
  id           Int    @id @default(autoincrement()) @map("comment_id")
  userId       Int    @map("user_id")
  policyId     Int    @map("policy_id")
  comment      String
  likes        Int    @default(0)
  replyId      Int?   @map("reply_id")
  replyComment String? @map("reply_comment")

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  policy Policy @relation(fields: [policyId], references: [id])
  parentComment PolicyComment? @relation("PolicyCommentReplies", fields: [replyId], references: [id])
  replies       PolicyComment[] @relation("PolicyCommentReplies")

  @@map("policy_comments")
}

model Report {
  id           Int      @id @default(autoincrement()) @map("report_id")
  reportTitle  String   @map("report_title")
  createdTime  DateTime @map("created_time")
  lastUpdatedTime DateTime @map("last_updated_time")
  priority     String
  assignedTo   String   @map("assigned_to")
  evidenceHash String   @map("evidence_hash")
  resolvedStatus Boolean @default(false) @map("resolved_status")
  userId       Int?     @map("user_id") // Made optional in case reports can be anonymous

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("reports")
}

model PetitionActivity {
  id         Int      @id @default(autoincrement())
  date       DateTime
  count      Int
  petitionId Int      @map("petition_id")

  // Relations
  petition Petition @relation(fields: [petitionId], references: [id])

  @@map("petition_activities")
}