import ballerina/http;
import ballerina/log;
import ballerina/time;

# Import configuration
configurable int port = 8080;
configurable string supabaseUrl = "https://hhnxsixgjcdhvzuwbmzf.supabase.co";
configurable string supabaseServiceRoleKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhobnhzaXhnamNkaHZ6dXdibXpmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTcyMjYwMjQ4NSwiZXhwIjoyMDM4MTc4NDg1fQ.m7uHZHJ6yMgb_Dv6k2Fz_sQKlTz_HEW0uOmnJRqBIH4";

# HTTP listener for the API
listener http:Listener apiListener = new (port);

# Global instances
DatabaseClient dbClient = new DatabaseClient();
CategoriesService categoriesService = new CategoriesService();
ApiRoutes apiRoutes = new ApiRoutes();

# Main API service
service /api on apiListener {
    
    # Health check endpoint
    resource function get health() returns string {
        return apiRoutes.handleHealthCheck();
    }
    
    # Server status endpoint
    resource function get status() returns string {
        return apiRoutes.handleServerStatus();
    }
    
    # Database health check endpoint
    resource function get db/health() returns json|error {
        return apiRoutes.handleDatabaseHealth();
    }
    
    # Database setup endpoint
    resource function post db/setup() returns json {
        return apiRoutes.handleDatabaseSetup();
    }
    
    # Check database tables endpoint
    resource function get db/tables() returns json|error {
        return apiRoutes.handleCheckTables();
    }
    
    # Server information endpoint
    resource function get info() returns json {
        return apiRoutes.handleServerInfo();
    }

    # Categories endpoints
    
    # Get all categories
    resource function get categories() returns json|error {
        return apiRoutes.handleGetCategories();
    }

    # Get category by ID
    resource function get categories/[int categoryId]() returns json|error {
        return apiRoutes.handleGetCategoryById(categoryId);
    }

    # Create a new category
    resource function post categories(http:Request request) returns json|error {
        return apiRoutes.handleCreateCategory(request);
    }

    # Update category by ID
    resource function put categories/[int categoryId](http:Request request) returns json|error {
        return apiRoutes.handleUpdateCategory(request, categoryId);
    }

    # Delete category by ID
    resource function delete categories/[int categoryId]() returns json|error {
        return apiRoutes.handleDeleteCategory(categoryId);
    }

    # Data retrieval endpoints
    
    # Get users
    resource function get users() returns json|error {
        return apiRoutes.handleGetData("users");
    }

    # Get projects
    resource function get projects() returns json|error {
        return apiRoutes.handleGetData("projects");
    }

    # Get proposals
    resource function get proposals() returns json|error {
        return apiRoutes.handleGetData("proposals");
    }

    # Get policies
    resource function get policies() returns json|error {
        return apiRoutes.handleGetData("policies");
    }

    # Get reports
    resource function get reports() returns json|error {
        return apiRoutes.handleGetData("reports");
    }

    # Get petitions
    resource function get petitions() returns json|error {
        return apiRoutes.handleGetData("petitions");
    }
}

# Initialize the application
#
# + return - Error if initialization fails
function initializeApplication() returns error? {
    log:printInfo("üîÑ Initializing Transparent Governance Platform...");
    
    // Initialize database client
    check dbClient.init(supabaseUrl, supabaseServiceRoleKey, "/rest/v1");
    
    // Initialize categories service
    categoriesService.init(dbClient);
    
    // Initialize API routes
    apiRoutes.init(dbClient);
    
    // Check database connection
    json|error healthCheck = dbClient.checkHealth();
    if healthCheck is error {
        log:printWarn("‚ö†Ô∏è  Database connection test failed: " + healthCheck.message());
        log:printWarn("‚ö†Ô∏è  Server will start but database features may not work");
    } else {
        log:printInfo("‚úÖ Database connection verified");
    }
    
    return;
}

# Application entry point
#
# + return - Error if application fails to start
public function main() returns error? {
    log:printInfo("üöÄ Starting Transparent Governance Platform Backend...");
    
    // Initialize the application
    check initializeApplication();
    
    log:printInfo("üåê Server started on port " + port.toString());
    log:printInfo("üìã Available endpoints:");
    log:printInfo("  ‚û§ Health check: http://localhost:" + port.toString() + "/api/health");
    log:printInfo("  ‚û§ Server status: http://localhost:" + port.toString() + "/api/status");
    log:printInfo("  ‚û§ Database health: http://localhost:" + port.toString() + "/api/db/health");
    log:printInfo("  ‚û§ Server info: http://localhost:" + port.toString() + "/api/info");
    log:printInfo("  ‚û§ Categories: http://localhost:" + port.toString() + "/api/categories");
    log:printInfo("üéâ Server is ready to accept requests!");
    log:printInfo("üí° Note: Using HTTP REST API for database operations");
    
    return;
}
